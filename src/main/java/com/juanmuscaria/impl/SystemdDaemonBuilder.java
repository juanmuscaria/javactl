package com.juanmuscaria.impl;

import com.juanmuscaria.api.IDaemonBuilder;
import com.juanmuscaria.api.jvm.JavaInstallation;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class SystemdDaemonBuilder implements IDaemonBuilder {

    private String name;
    private String description;
    private JavaInstallation javaInstall;
    private String user;
    private File workingDir;
    private boolean autoRestart;
    private String jmvArgs;
    private String args;
    private File jar;
    private String group;

    @Override
    public IDaemonBuilder name(String name) {
        this.name = name;
        return this;
    }

    @Override
    public IDaemonBuilder description(String description) {
        this.description = description;
        return this;
    }

    @Override
    public IDaemonBuilder java(JavaInstallation java) {
        this.javaInstall = java;
        return this;
    }

    @Override
    public IDaemonBuilder user(String user) {
        this.user = user;
        return this;
    }

    @Override
    public IDaemonBuilder group(String group) {
        this.group = group;
        return this;
    }

    @Override
    public IDaemonBuilder workingDir(File workingDir) {
        this.workingDir = workingDir;
        return this;
    }

    @Override
    public IDaemonBuilder autoRestart(boolean restart) {
        this.autoRestart = restart;
        return this;
    }

    @Override
    public IDaemonBuilder jvmArgs(String args) {
        this.jmvArgs = args;
        return this;
    }

    @Override
    public IDaemonBuilder args(String args) {
        this.args = args;
        return this;
    }

    @Override
    public IDaemonBuilder jarFile(File jar) {
        this.jar = jar;
        return this;
    }

    @Override
    public File[] build() {
        if (name == null || name.isBlank())
            throw new IllegalArgumentException("The name can't be empty!");
        if (!jar.exists())
            throw new IllegalArgumentException("The specified jar file does not exist!");
        if (workingDir == null)
            workingDir = jar.getAbsoluteFile().getParentFile();
        if (description == null || description.isBlank())
            description = name;
        if (args == null)
            args = "";
        if (jmvArgs == null)
            jmvArgs = "";
        var file = new File("/etc/systemd/system/javactl-" + name + ".service");
        var socket = new File("/etc/systemd/system/javactl-" + name + ".socket");
        try {
            if (file.createNewFile() && socket.createNewFile()) {
                try (BufferedWriter writter = new BufferedWriter(new FileWriter(file))) {
                    writter.write(genServiceFile());
                }
                try (BufferedWriter writter = new BufferedWriter(new FileWriter(socket))) {
                    writter.write(genSocketFile());
                }
            } else {
                throw new IllegalArgumentException("A service with the same name already exist!");
            }
        } catch (IOException e) {
            throw new IllegalArgumentException("Unable to create daemon files, are you running as root? err:" + e.getMessage());
        }
        return new File[]{file, socket};
    }

    private String genServiceFile() {
        StringBuilder b = new StringBuilder();
        b.append("# Generated by javactl 0.1 Do not touch\n")
                .append("[Unit]\n")
                .append("Description=").append(description).append("\n")
                .append("After=network.target\n")
                .append("Wants=network-online.target\n")
                .append("\n")
                .append("[Service]\n")
                .append("Type=simple\n")
                .append("WorkingDirectory=").append(workingDir.getAbsolutePath()).append("\n");

        b.append("ExecStart=").append(javaInstall.getExec().getAbsolutePath())
                .append(" ").append(jmvArgs).append(" -jar ")
                .append(jar.getAbsolutePath()).append(" ").append(args).append("\n");

        if (user != null && !user.isBlank())
            b.append("User=").append(user).append("\n");
        if (group != null && !group.isBlank())
            b.append("Group=").append(group).append("\n");
        b.append("Environment='JAVA_HOME=").append(javaInstall.getHome()).append("'\n");
        if (autoRestart)
            b.append("Restart=on-failure\n");
        b.append("Sockets=javactl-").append(name).append(".socket\n")
                .append("StandardInput=socket\n")
                .append("StandardOutput=journal\n")
                .append("StandardError=journal\n");
        b.append("\n")
                .append("[Install]\n")
                .append("WantedBy=multi-user.target");
        return b.toString();
    }

    private String genSocketFile() {
        StringBuilder b = new StringBuilder();
        b.append("# Generated by javactl 0.1 Do not touch\n")
                .append("[Unit]\n")
                .append("PartOf=javactl-").append(name).append(".service\n")
                .append("\n")
                .append("[Socket]\n")
                .append("ListenFIFO=/run/javactl/").append(name);
        return b.toString();
    }
}
